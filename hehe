def get_video_frames(video_path, num_frames=10):
    cap = cv2.VideoCapture(video_path)
    frames = []
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    step = max(1, total_frames // num_frames)
    
    for i in range(0, total_frames, step):
        cap.set(cv2.CAP_PROP_POS_FRAMES, i)
        ret, frame = cap.read()
        if not ret:
            break
        frames.append(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY))
    
    cap.release()
    return frames

def extract_features(video_path, num_frames=10):
    frames = get_video_frames(video_path, num_frames)
    orb = cv2.ORB_create()
    features = []
    for frame in frames:
        kp, des = orb.detectAndCompute(frame, None)
        features.append(des)
    return features

def save_features(folder_path, output_file):
    video_features = {}
    filenames = [f for f in os.listdir(folder_path) if f.endswith(('.mp4', '.avi', '.mkv'))]
    
    for filename in tqdm(filenames, desc="Processing videos"):
        video_path = os.path.join(folder_path, filename)
        video_path = os.path.normpath(video_path).replace("\\", "/")  # Normalize and replace backslashes
        features = extract_features(video_path, num_frames=100)
        video_features[video_path] = features
    
    with open(output_file, 'wb') as f:
        pickle.dump(video_features, f)

def compare_features(features1, features2):
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    total_diff = 0
    count = 0
    for des1, des2 in zip(features1, features2):
        if des1 is None or des2 is None:
            continue
        matches = bf.match(des1, des2)
        matches = sorted(matches, key=lambda x: x.distance)
        total_diff += sum([match.distance for match in matches]) / len(matches)
        count += 1
    return total_diff / count if count > 0 else float('inf')

def find_similar_videos(new_video_path, features_file, top_n=5):
    with open(features_file, 'rb') as f:
        video_features = pickle.load(f)
    
    new_video_features = extract_features(new_video_path, num_frames=100)
    
    similarities = []
    for video_path, features in video_features.items():
        print(f"Comparing with {video_path}")
        diff = compare_features(new_video_features, features)
        similarity = 100 - (diff / 100) * 100  # Convert to percentage
        similarities.append((video_path, similarity))
    
    similarities.sort(key=lambda x: x[1], reverse=True)
    return similarities[:top_n]


def main():
    root = tk.Tk()
    root.withdraw()  # Hide the main window

    features_file = "data.pkl"
    while True:
        print("\n=== MENU TÌM KIẾM VIDEO ===")
        print("1. Tạo file hash từ folder video")
        print("2. Tìm video gốc từ file video")
        print(f"3. Đổi file data (hiện tại: {features_file})")
        print("4. Thoát")
        
        choice = input("\nNhập lựa chọn của bạn (1-4): ")
        
        if choice == '1':
            folder_path = filedialog.askdirectory(title="Chọn đường dẫn folder")
            if not folder_path:
                print("Không có folder nào được chọn.")
                continue
            output_file = filedialog.asksaveasfilename(defaultextension=".pkl", initialfile="data.pkl", title="Nhập đường dẫn file output")
            if not output_file:
                output_file = "data.pkl"
            save_features(folder_path, output_file)
            print(f"Dữ liệu đã được lưu vào {output_file}")
        
        elif choice == '2':
            print(f"Đường dẫn file data: {features_file}")
            new_video_path = filedialog.askopenfilename(title="Nhập đường dẫn video mới", filetypes=[("Video files", "*.mp4 *.avi *.mkv")])
            if not new_video_path:
                print("Không có video nào được chọn.")
                continue
            similar_videos = find_similar_videos(new_video_path, features_file)
            print("Top 5 video gốc giống nhất:")
            while True:
                print("----------------------------------------------------")
                for idx, (video_path, similarity) in enumerate(similar_videos, start=1):
                    print(f"{idx}. \033[92m{video_path}\033[0m: \033[94m{similarity:.2f}%\033[0m")
                print("6. Thoát")
                print("----------------------------------------------------")
                
                video_choice = input("Nhập số của video bạn muốn mở (1-6): ")
                try:
                    video_choice = int(video_choice)
                    if 1 <= video_choice <= len(similar_videos)+1:
                        if video_choice == 6:
                            break
                        webbrowser.open(f"file://{similar_videos[video_choice - 1][0]}")
                    else:
                        print("Lựa chọn không hợp lệ.")
                except ValueError:
                    print("Lựa chọn không hợp lệ.")
        
        elif choice == '3':
            print("Chọn file data mới.")
            features_file = filedialog.askopenfilename(defaultextension=".pkl", initialfile="data.pkl", title="Nhập đường dẫn file data", filetypes=[("Pickle files", "*.pkl")])
            if not features_file:
                features_file = "data.pkl"
            print(f"Đường dẫn file data đã được đặt thành {features_file}")
        
        elif choice == '4':
            break
        
        else:
            print("Lựa chọn không hợp lệ. Vui lòng thử lại.")

if __name__ == "__main__":
    main()
